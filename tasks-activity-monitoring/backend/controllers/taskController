import { User, Phone } from '../models'; // Import the User and Phone models from your models folder

const UserController = {
    async getAllUsers(req, res) {
        try {
            const users = await User.findAll();
            if (!users || users.length === 0) {
                return res.status(HTTP_STATUS_NOT_EXIST).json({ error: 'No users found' });
            }
            res.status(HTTP_STATUS_OK).json(users);
        } catch (error) {
            console.error(error);
            res.status(INTERNAL_SERVER_ERROR).json({ error: 'Internal Server Error' });
        }
    },

    async getUserById(req, res) {
        try {
            const { id } = req.params;
            const user = await User.findByPk(id);
            if (!user) {
                return res.status(HTTP_STATUS_NOT_EXIST).json({ error: 'User not found' });
            }
            res.status(HTTP_STATUS_OK).json(user);
        } catch (error) {
            console.error(error);
            res.status(INTERNAL_SERVER_ERROR).json({ error: 'Internal Server Error' });
        }
    },

    async createUser(req, res) {
        try {
            const newUser = await User.create(req.body);
            res.status(HTTP_STATUS_CREATED).json(newUser);
        } catch (error) {
            console.error(error);
            res.status(INTERNAL_SERVER_ERROR).json({ error: 'Internal Server Error' });
        }
    },

    async updateUser(req, res) {
        try {
            const { id } = req.params;
            const updatedData = req.body;
            const user = await User.findByPk(id);
            if (!user) {
                return res.status(HTTP_STATUS_NOT_EXIST).json({ error: 'User not found' });
            }
            await user.update(updatedData);
            res.status(HTTP_STATUS_OK).json(user);
        } catch (error) {
            console.error(error);
            res.status(INTERNAL_SERVER_ERROR).json({ error: 'Internal Server Error' });
        }
    },

    async deleteUser(req, res) {
        try {
            const { id } = req.params;
            const deletedUser = await User.destroy({
                where: { id }
            });
            if (deletedUser === 0) {
                return res.status(HTTP_STATUS_NOT_EXIST).json({ error: 'User not found' });
            }
            res.status(HTTP_STATUS_OK).json({ message: `User with id ${id} deleted successfully` });
        } catch (error) {
            console.error(error);
            res.status(INTERNAL_SERVER_ERROR).json({ error: 'Internal Server Error' });
        }
    }
};

export default UserController;
